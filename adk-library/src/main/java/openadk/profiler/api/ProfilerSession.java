//
// Copyright (c)1998-2011 Pearson Education, Inc. or its affiliate(s). 
// All rights reserved.
//

package openadk.profiler.api;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.Serializable;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.StringTokenizer;
import java.util.Vector;

import org.apache.commons.lang.NotImplementedException;

import openadk.profiler.SIFProfilerException;


/**
 * 	A profiling session.<p>
 */
public class ProfilerSession implements Serializable
{
	/**
	 * 	The database-assigned session ID
	 */
	protected int fID;
	
	protected String fDesc;
	
	protected java.util.Date fStartTime;
	
	protected java.util.Date fEndTime;
	
	protected int fMetricCount = -1;
	
	protected String fProject;
	
	
	/**
	 * 	Constructor
	 */
	public ProfilerSession( int id )
	{
		fID = id;
	}
	
	public int getMetricCount() 
	{
	    throw new NotImplementedException();
//		if( fMetricCount == -1 ) {
//			try {
//				fMetricCount = ProfilerDB.DB.getMetricCount( fID );
//			} catch( Exception ex ) {
//				fMetricCount = -1;
//			}
//		}
		
//		return fMetricCount;
	}
	
	public String getProjectName()
	{
		return fProject;
	}
	
	public void setProjectName( String name )
	{
		fProject = name;
	}
		
	
	/**
	 *	Import metric data into the database.
	 *	@param files One or more text files generated by SIFProfilerClient 	
	 */
	public void importMetrics( String[] files )
		throws IOException,
			   SIFProfilerException
	{
		File[] f = new File[ files.length ];
		for( int i = 0; i < files.length; i++ ) {
			f[i] = new File( files[i] );
		}
		
		importMetrics( f );
	}
	
	/**
	 *	Import metric data into the database.
	 *	@param files One or more text files generated by SIFProfilerClient 	
	 */
	public void importMetrics( File[] files )
		throws IOException,
			   SIFProfilerException
	{
		boolean check = false;
		
		Connection conn = null;
		PreparedStatement ps = null;
		Statement s = null;
		FileReader fin = null;
		BufferedReader in = null;
		int records = 0;
		
		try
		{
			conn = null; // FIXME: ProfilerDB.DB.getConnection();
			s = conn.createStatement();
			
			//	Delete any existing metric data for this session
			s.executeUpdate( "DELETE FROM Metrics WHERE sessionID = " + fID );
			
			//	Prepare a statement to insert records into the Metrics table
			ps = conn.prepareStatement( "INSERT INTO Metrics (sessionID,msgID,objType,started,elapsed,oid1,oid2,oid3,oid4,oid5,oid6,oid7,oid8) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?) ");
			
			SimpleDateFormat fmt = (SimpleDateFormat)DateFormat.getDateTimeInstance();
			fmt.applyPattern( "MM/dd/yyyy hh:mm:ss a" );
			
			//	Enumerate the .metrics files
			for( int i = 0; i < files.length; i++ )
			{
				log( "Importing: " + files[i].getAbsolutePath() );
				if( !files[i].exists() )
					throw new IOException( "File not found: " + files[i].getAbsolutePath() );
				
				String line = null;
				fin = new FileReader( files[i] );
				in = new BufferedReader( fin );
				int linenum = 0;

				//
				//	Parse comma-delimited parameters, which should be in this format:
				//		ID=n, OID=oid, Start=n, End=n, MsgId=msgid
				//
				while( ( line = in.readLine() ) != null )
				{
					linenum++;
					
					StringTokenizer tok = new StringTokenizer( line, "," );
					String oid = null;
					String msgid = null;
					long started = -1;
					long ended = -1;
					int id = -1;
					int objType = -1;

					while( tok.hasMoreTokens() )
					{
						String st = tok.nextToken().trim();

						if( st.startsWith( "ID" ) ) {
							id = _intParam( st );
						} else
						if( st.startsWith( "OID") ) {
							oid = _stringParam( st );
						} else
						if( st.startsWith( "Start") ) {
							started = _longParam( st );
						} else
						if( st.startsWith( "End") ) {
							ended = _longParam( st );
						} else
						if( st.startsWith( "MsgId" ) ) {
							msgid = _stringParam( st );
						}
					}
					
					//	Validate required parameters
					if( id == -1 )
						throw new SIFProfilerException( "ID parameter required (line: " + linenum + ", file: " + files[i].getName() + "): " + line );
					if( started == -1 || ended == -1 )
						throw new SIFProfilerException( "Start and End parameters required (line: " + linenum + ", file: " + files[i].getName() + "): " + line );
					if( oid == null )
						throw new SIFProfilerException( "OID parameter required (line: " + linenum + ", file: " + files[i].getName() + "): " + line );

					//	Bind to PreparedStatement
					ps.setInt( 1, id );
					
					if( msgid == null ) {
						ps.setNull( 2, Types.VARCHAR );
					} else {
						ps.setString( 2, msgid );
					}
					
					if( objType == -1 ) {
						ps.setNull( 3, Types.INTEGER );
					} else {
						ps.setInt( 3, objType );
					}
					
					ps.setTimestamp( 4, new java.sql.Timestamp( started ) );
					ps.setLong( 5, ( ended - started ) );

					int segments = 0;

					if( oid != null )
					{
						try 
						{
							StringTokenizer oidtok = new StringTokenizer( oid, "." );
							while( oidtok.hasMoreTokens() ) {
								ps.setInt( segments+6, Integer.parseInt( oidtok.nextToken() ) );
								segments++;
							}
						}
						catch( NumberFormatException nfe ) {
							throw new SIFProfilerException( "Invalid OID value (line: " + linenum + ", file: " + files[i].getName() + "): " + line );
						}
					}
					for( int k = segments; k < 8; k++ )
						ps.setNull( k + 6, Types.INTEGER );
					
					ps.execute();
					records++;
				}
				
				in.close();
				fin.close();
				
				log( "Imported " + records + " records" );
			}
			
			ResultSet rs = s.executeQuery( "SELECT COUNT(*) FROM Metrics WHERE sessionID = " + fID );
			if( rs.next() ) {
				fMetricCount = rs.getInt(1);
			}
			rs.close();
			s.close();
		}
		catch( SQLException sqle )
		{
			check = true;
			
			throw new SIFProfilerException( sqle.toString() );
		}
		finally
		{
			if( ps != null ) {
				try {
					ps.close();
				} catch( SQLException ignored ) {
				}
			}
			if( s != null ) {
				try {
					s.close();
				} catch( SQLException ignored ) {
				}
			}
			
			// FIXME: ProfilerDB
//			if( conn != null )
//				ProfilerDB.DB.releaseConnection( conn,check );
			
			if( in != null )
				in.close();
			if( fin != null )
				fin.close();
		}
	}
	
	private int _intParam( String s ) {
		int i = s.indexOf("=");
		return Integer.parseInt( s.substring(i+1) );
	}
	private long _longParam( String s ) {
		int i = s.indexOf("=");
		return Long.parseLong( s.substring(i+1) );
	}
	private String _stringParam( String s ) {
		int i = s.indexOf("=");
		return s.substring(i+1);
	}
	
	public void log( String msg )
	{
		System.out.println( "SIFProfiler> " + msg );
	}
	
	/**
	 * 	Query the database for metrics
	 * 	@param query A MetricQuery instance
	 * 	@return An array of zero or more Metric instances
	 */
	public Metric[] queryMetrics( MetricQuery query ) throws SQLException
	{
		boolean check = false;
		
		String cond = query == null ? null : query.toSQL();
		String sql = "SELECT metricID,msgID,objType,started,elapsed,oid1,oid2,oid3,oid4,oid5,oid6,oid7,oid8 FROM Metrics WHERE sessionID = " + fID + ( cond == null ? "" : ( " AND ( " + cond + ")"  ) );
		Connection conn = null;
		Statement s = null;
		ResultSet rs = null;
		Vector v = new Vector();
		
		try
		{
			conn = null; // FIXME: ProfilerDB.DB.getConnection();
			s = conn.createStatement();
			System.out.println( sql );
			rs = s.executeQuery( sql );
			
			while( rs.next() ) 
			{
				Metric m = new Metric( rs.getInt(1) );
				m.setMsgId( rs.getString(2) );

				m.setObjectType( rs.getShort(3) );
				java.util.Date dt = rs.getTimestamp(4);
				if( dt != null ) {
					m.fStarted = dt.getTime();
				}
				
				m.fElapsed = rs.getInt(5);
				for( int i = 0; i < Metric.OID_LENGTH; i++ )
					m.setOID( i, rs.getShort(i+6) );
				
				v.add(m);
			}
		}
		catch( SQLException sqle )
		{
			check = true;
			
			throw sqle;
		}
		finally
		{
			if( s != null ) {
				try {
					s.close();
				} catch( SQLException ignored ) {
				}
			}
			if( rs != null ) {
				try {
					rs.close();
				} catch( SQLException ignored ) {
				}
			}
			
			// FIXME: ProfilerDB
//			if( conn != null )
//				ProfilerDB.DB.releaseConnection( conn,check );
		}
		
		Metric[] arr = new Metric[ v.size() ];
		v.copyInto( arr );
		return arr;
	}
	
	/**
	 * 	Query the database for the sum of elapsed times for metrics matching the specified query conditions
	 * 	@param query A MetricQuery instance
	 * 	@return The sum of elapsed times for the metrics matching the query conditions
	 */
	public int queryElapsedTime( MetricQuery query ) throws SQLException
	{
		boolean check = false;
		
		String cond = query == null ? null : query.toSQL();
		String sql = "SELECT SUM(elapsed) FROM Metrics WHERE sessionID = " + fID + ( cond == null ? "" : ( " AND ( " + cond + ")"  ) );
		Connection conn = null;
		Statement s = null;
		ResultSet rs = null;
		
		try
		{
			conn = null; // FIXME: ProfilerDB.DB.getConnection();
			s = conn.createStatement();
			System.out.println( sql );
			rs = s.executeQuery( sql );
			
			if( rs.next() )
				return rs.getInt(1);
		}
		catch( SQLException sqle )
		{
			check = true;
			
			throw sqle;
		}
		finally
		{
			if( s != null ) {
				try {
					s.close();
				} catch( SQLException ignored ) {
				}
			}
			if( rs != null ) {
				try {
					rs.close();
				} catch( SQLException ignored ) {
				}
			}
			
			// FIXME: ProfilerDB
//			if( conn != null )
//				ProfilerDB.DB.releaseConnection( conn,check );
		}
		
		return 0;
	}

	/**
	 * 	Query the database for metrics
	 * 	@param query A MetricQuery instance
	 * 	@return The number of metric records that match the criteria
	 */
	public int queryMetricsCount( MetricQuery query ) throws SQLException
	{
		boolean check = false;
		
		String cond = query == null ? null : query.toSQL();
		String sql = "SELECT COUNT(*) FROM Metrics WHERE sessionID = " + fID + ( cond == null ? "" : ( " AND ( " + cond + ")"  ) );
		Connection conn = null;
		Statement s = null;
		ResultSet rs = null;
		
		try
		{
			conn = null; // FIXME: ProfilerDB.DB.getConnection();
			s = conn.createStatement();
			System.out.println( sql );
			rs = s.executeQuery( sql );
			
			if( rs.next() )
				return rs.getInt(1);
		}
		catch( SQLException sqle )
		{
			check = true;
			
			throw sqle;
		}
		finally
		{
			if( s != null ) {
				try {
					s.close();
				} catch( SQLException ignored ) {
				}
			}
			if( rs != null ) {
				try {
					rs.close();
				} catch( SQLException ignored ) {
				}
			}
			
			// FIXME: ProfilerDB
//			if( conn != null )
//				ProfilerDB.DB.releaseConnection( conn,check );
		}
		
		return 0;
	}
	
	/**
	 * 	Gets the session ID
	 */
	public int getID() {
		return fID;
	}
	
	/**
	 * 	Gets the session description
	 */
	public String getDescription() {
		return fDesc;
	}
	
	/**
	 * 	Gets the session start time
	 */
	public java.util.Date getStartTime() {
		return fStartTime;
	}
	
	/**
	 * 	Gets the session start time
	 */
	public java.util.Date getEndTime() {
		return fEndTime;
	}
	
	public void setDescription( String desc ) {
		fDesc = desc;
	}
	public void setStartTime( java.util.Date time ) {
		fStartTime = time;
	}
	public void setEndTime( java.util.Date time ) {
		fEndTime = time;
	}
	
	
	/**
	 * 	Return a string representation of this session
	 */
	public String toString() {
		return fID + "-" + fDesc + ( fProject == null ? "" : ( " (" + fProject + ")" ) );
	}
}
